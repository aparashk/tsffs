decl {

    # We import most parameters from the QSP-X86 boot script
    params from "%simics%/targets/qsp-x86/qsp-hdd-boot.simics"

    group "MSR"

    # Set the TSC factor field for platform info MSR.
    param tsc_factor : int = 20

    group "System"

    # Automatically enter BIOS setup and start UEFI shell using the script
    # branch below
    param auto_start_uefi_shell : bool = TRUE

    # NSH script that controls things. 
    param startup_nsh : file("*") or nil = "%simics%/targets/x509-parse/run_uefi_app.nsh"

    # UEFI app you wanna start. 
    param uefi_app : file("*")

    result system : string
    result eth_link : string or nil
    result service_node : string or nil
}

echo "Loaded simics declaration"

echo "Running command file"

run-command-file "%simics%/targets/qsp-x86/qsp-hdd-boot.simics"

@import os
@simenv.startup_nsh_nodir = os.path.basename(simenv.startup_nsh)
echo "Set startup nsh"
@simenv.uefi_app_nodir = os.path.basename(simenv.uefi_app)
echo "Set startup uefi app"

# The below branch will (when enabled) enter the BIOS menu by pressing ESC
# after 10 seconds, then go to the third entry on the top level (by pressin DOWN twice).
# The assumption is that this is the boot device selection (which is true for the QSP BIOS)
# Then there is one press of UP, to select the last element in the list, which is assumed
# to be the UEFI shell (which again is true for the QSP BIOS). Then the shell is started.

# note: this is actually needed to boot the uefi image!

if $auto_start_uefi_shell {
    script-branch "UEFI Shell Enter Branch" {
        echo "Doing UEFI button combination"
        local $kbd = $system.mb.sb.kbd
        local $con = $system.console.con
        local $sercon = $system.serconsole.con
        bp.time.wait-for seconds = 10
        $kbd.key-press ESC
        bp.time.wait-for seconds = 3
        foreach $i in (range 2) {
            $kbd.key-press KP_DOWN
            bp.time.wait-for seconds = .5
        }
        $kbd.key-press ENTER
        bp.time.wait-for seconds = .5
        $kbd.key-press KP_UP
        bp.time.wait-for seconds = .5
        $kbd.key-press ENTER
        bp.time.wait-for seconds = .5
        
        #stop countdown
        $kbd.key-press ENTER         
        bp.time.wait-for seconds = .5
        
        echo "Running command: FS0:\n"

        $con.input "FS0:\n"
        bp.time.wait-for seconds = 10

        echo "Running command: " + "set -v UEFI_APP_ON_HOST \"" + $uefi_app + "\"\n"
        $con.input ("set -v UEFI_APP_ON_HOST \" " + $uefi_app + "\"\n")
        bp.time.wait-for seconds = .5

        echo "Running command: " + "set -v UEFI_APP_NODIR \"" + $uefi_app_nodir + "\"\n"
        $con.input ("set -v UEFI_APP_NODIR \" " + $uefi_app_nodir + "\"\n")
        bp.time.wait-for seconds = .5

    
        local $manager = (start-agent-manager)

        echo "Running command: " + "SimicsAgent.efi --download \"" + (lookup-file $startup_nsh) + "\"\n"
        $con.input ("SimicsAgent.efi --download " + (lookup-file $startup_nsh) + "\n")
        bp.time.wait-for seconds = .5
        
        echo "Running command: " + "\"" + $startup_nsh_nodir + "\"\n"
        $con.input ("" + $startup_nsh_nodir + "\n")

    }
}