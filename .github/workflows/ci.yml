name: CI

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

env:
    CARGO_TERM_COLOR: always

    # Simics base
    SIMICS_PACKAGE_VERSION_1000: 6.0.166
    # QSP X86
    SIMICS_PACKAGE_VERSION_2096: 6.0.68
    # QSP CPU
    SIMICS_PACKAGE_VERSION_8112: 6.0.17

jobs:
    build_and_test:
        container: cache-registry.caas.intel.com/cache/library/ubuntu
        runs-on: [self-hosted, gasp]
        steps:
            - name: Install Git
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  apt-get -y update && \
                  apt-get -y install git
            - uses: actions/checkout@v3
            - name: Install Dependencies
              shell: bash
              run: |
                  apt-get -y update && \
                  apt-get -y install \
                    git \
                    curl \
                    build-essential \
                    cmake
            - name: Install Rust Toolchain
              shell: bash
              run: |
                  curl https://sh.rustup.rs -sSf \
                  | sh -s -- -y --default-toolchain nightly --component rustfmt \
                    --component clippy --component miri --no-modify-path
            - name: Install SIMICS (Internal)
              shell: bash
              run: |
                  mkdir -p "${HOME}/simics"
                  cd "${HOME}/simics"
                  curl -o intel-simics-package-manager-1.7.3-linux64.tar.gz \
                    https://af02p-or.devtools.intel.com/artifactory/simics-local/pub/simics-installer/external/1.7.3/intel-simics-package-manager-1.7.3-linux64.tar.gz
                  tar -xvf intel-simics-package-manager-1.7.3-linux64.tar.gz
                  {
                    echo "1000 ${{ inputs.SIMICS_PUBLIC_PACKAGE_KEY_1000 }}";
                    echo "2096 ${{ inputs.SIMICS_PUBLIC_PACKAGE_KEY_2096 }}";
                    echo "8112 ${{ inputs.SIMICS_PUBLIC_PACKAGE_KEY_8112 }}";
                  } > /SIMICS-PUBLIC-PACKAGE-DECRYPTION-KEY-FILE
                  cat /SIMICS-PUBLIC-PACKAGE-DECRYPTION-KEY-FILE
                  ./intel-simics-package-manager-1.7.3/ispm settings \
                    --config-file /ispm.conf decryption-key-files \
                    --add /SIMICS-PUBLIC-PACKAGE-DECRYPTION-KEY-FILE
                  cat /ispm.conf
                  ./intel-simics-package-manager-1.7.3/ispm \
                    --config-file /ispm.conf \
                    --non-interactive \
                    --verbose \
                    --package-repo https://af02p-or.devtools.intel.com/ui/native/simics-repos/pub/simics-6/linux64/ \
                    --install-dir "${HOME}/simics" \
                    install \
                    1000-${{ inputs.SIMICS_PUBLIC_PACKAGE_VERSION_1000 }} \
                    2096-${{ inputs.SIMICS_PUBLIC_PACKAGE_VERSION_2096 }} \
                    8112-${{ inputs.SIMICS_PUBLIC_PACKAGE_VERSION_8112 }}
            - name: Set up .env
              shell: bash
              run: |
                  echo "SIMICS_HOME=${HOME}/simics" > .env
            - name: Build Project
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  "${HOME}/.cargo/bin/cargo" build --features=${{ env.SIMICS_PACKAGE_VERSION_1000 }}
            - name: Check Project
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  "${HOME}/.cargo/bin/cargo" clippy --features=${{ env.SIMICS_PACKAGE_VERSION_1000 }}
            - name: Test Project
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  "${HOME}/.cargo/bin/cargo" test --features=${{ env.SIMICS_PACKAGE_VERSION_1000 }}
            - name: Build Docs
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  "${HOME}/.cargo/bin/cargo" doc --features=${{ env.SIMICS_PACKAGE_VERSION_1000 }}
            - name: Test Docs
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  "${HOME}/.cargo/bin/cargo" test --doc --features=${{ env.SIMICS_PACKAGE_VERSION_1000 }}

    static_analysis:
        container: cache-registry.caas.intel.com/cache/library/ubuntu
        runs-on: [self-hosted, gasp]
        steps:
            - name: Install Git
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  apt-get -y update && \
                  apt-get -y install git
            - uses: actions/checkout@v3
            - name: Install Dependencies
              shell: bash
              run: |
                  apt-get -y update && \
                  apt-get -y install \
                    git \
                    curl \
                    build-essential \
                    cmake
            - name: Install Rust Toolchain
              shell: bash
              run: |
                  curl https://sh.rustup.rs -sSf \
                  | sh -s -- -y --default-toolchain nightly --component rustfmt \
                    --component clippy --component miri --no-modify-path
            - name: Install SIMICS (Internal)
              shell: bash
              run: |
                  mkdir -p "${HOME}/simics"
                  cd "${HOME}/simics"
                  curl -o intel-simics-package-manager-1.7.3-linux64.tar.gz \
                    https://af02p-or.devtools.intel.com/artifactory/simics-local/pub/simics-installer/external/1.7.3/intel-simics-package-manager-1.7.3-linux64.tar.gz
                  tar -xvf intel-simics-package-manager-1.7.3-linux64.tar.gz
                  {
                    echo "1000 ${{ inputs.SIMICS_PUBLIC_PACKAGE_KEY_1000 }}";
                    echo "2096 ${{ inputs.SIMICS_PUBLIC_PACKAGE_KEY_2096 }}";
                    echo "8112 ${{ inputs.SIMICS_PUBLIC_PACKAGE_KEY_8112 }}";
                  } > /SIMICS-PUBLIC-PACKAGE-DECRYPTION-KEY-FILE
                  cat /SIMICS-PUBLIC-PACKAGE-DECRYPTION-KEY-FILE
                  ./intel-simics-package-manager-1.7.3/ispm settings \
                    --config-file /ispm.conf decryption-key-files \
                    --add /SIMICS-PUBLIC-PACKAGE-DECRYPTION-KEY-FILE
                  cat /ispm.conf
                  ./intel-simics-package-manager-1.7.3/ispm \
                    --config-file /ispm.conf \
                    --non-interactive \
                    --verbose \
                    --package-repo https://af02p-or.devtools.intel.com/ui/native/simics-repos/pub/simics-6/linux64/ \
                    --install-dir "${HOME}/simics" \
                    install \
                    1000-${{ inputs.SIMICS_PUBLIC_PACKAGE_VERSION_1000 }} \
                    2096-${{ inputs.SIMICS_PUBLIC_PACKAGE_VERSION_2096 }} \
                    8112-${{ inputs.SIMICS_PUBLIC_PACKAGE_VERSION_8112 }}
            - name: Set up .env
              shell: bash
              run: |
                  echo "SIMICS_HOME=${HOME}/simics" > .env
            - name: Check Project
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  "${HOME}/.cargo/bin/cargo" clippy --features=${{ env.SIMICS_PACKAGE_VERSION_1000 }}
            - name: MIRI UB Checks
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  MIRIFLAGS="-Zmiri-backtrace=full -Zmiri-disable-isolation -Zmiri-panic-on-unsupported" "${HOME}/.cargo/bin/cargo" miri test --features=${{ env.SIMICS_PACKAGE_VERSION_1000 }}

    fuzz_tests:
        container: cache-registry.caas.intel.com/cache/library/ubuntu
        runs-on: [self-hosted, gasp]
        steps:
            - name: Install Git
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  apt-get -y update && \
                  apt-get -y install git
            - uses: actions/checkout@v3
            - name: Install Dependencies
              shell: bash
              run: |
                  apt-get -y update && \
                  apt-get -y install \
                    git \
                    curl \
                    build-essential \
                    cmake
            - name: Install Rust Toolchain
              shell: bash
              run: |
                  curl https://sh.rustup.rs -sSf \
                  | sh -s -- -y --default-toolchain nightly --component rustfmt \
                    --component clippy --component miri --no-modify-path
            - name: Install SIMICS (Internal)
              shell: bash
              run: |
                  mkdir -p "${HOME}/simics"
                  cd "${HOME}/simics"
                  curl -o intel-simics-package-manager-1.7.3-linux64.tar.gz \
                    https://af02p-or.devtools.intel.com/artifactory/simics-local/pub/simics-installer/external/1.7.3/intel-simics-package-manager-1.7.3-linux64.tar.gz
                  tar -xvf intel-simics-package-manager-1.7.3-linux64.tar.gz
                  {
                    echo "1000 ${{ inputs.SIMICS_PUBLIC_PACKAGE_KEY_1000 }}";
                    echo "2096 ${{ inputs.SIMICS_PUBLIC_PACKAGE_KEY_2096 }}";
                    echo "8112 ${{ inputs.SIMICS_PUBLIC_PACKAGE_KEY_8112 }}";
                  } > /SIMICS-PUBLIC-PACKAGE-DECRYPTION-KEY-FILE
                  cat /SIMICS-PUBLIC-PACKAGE-DECRYPTION-KEY-FILE
                  ./intel-simics-package-manager-1.7.3/ispm settings \
                    --config-file /ispm.conf decryption-key-files \
                    --add /SIMICS-PUBLIC-PACKAGE-DECRYPTION-KEY-FILE
                  cat /ispm.conf
                  ./intel-simics-package-manager-1.7.3/ispm \
                    --config-file /ispm.conf \
                    --non-interactive \
                    --verbose \
                    --package-repo https://af02p-or.devtools.intel.com/ui/native/simics-repos/pub/simics-6/linux64/ \
                    --install-dir "${HOME}/simics" \
                    install \
                    1000-${{ inputs.SIMICS_PUBLIC_PACKAGE_VERSION_1000 }} \
                    2096-${{ inputs.SIMICS_PUBLIC_PACKAGE_VERSION_2096 }} \
                    8112-${{ inputs.SIMICS_PUBLIC_PACKAGE_VERSION_8112 }}
            - name: Set up .env
              shell: bash
              run: |
                  echo "SIMICS_HOME=${HOME}/simics" > .env
            - name: Install Cargo-Fuzz
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  "${HOME}/.cargo/bin/cargo" install cargo-fuzz
            - name: Fuzz version-tools (10m)
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  cd util/version-tools

                  "${HOME}/.cargo/bin/cargo" fuzz build

                  timeout --preserve-status 600 "${HOME}/.cargo/bin/cargo" fuzz run \
                    fuzz_version_constraint_parse || exit 0

                  echo "Done fuzzing!"

                  if [ -d ./fuzz/artifacts ]; then
                    if find ./fuzz/artifacts -mindepth 1 -maxdepth 1 | read -r; then
                      exit 1
                    fi
                  fi
                  exit 0
            - name: Fuzz Raw-CStr (10m)
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  cd util/raw-cstr

                  "${HOME}/.cargo/bin/cargo" fuzz build

                  timeout --preserve-status 600 "${HOME}/.cargo/bin/cargo" fuzz run \
                    fuzz_raw_cstr || exit 0

                  echo "Done fuzzing!"

                  if [ -d ./fuzz/artifacts ]; then
                    if find ./fuzz/artifacts -mindepth 1 -maxdepth 1 | read -r; then
                      exit 1
                    fi
                  fi
                  exit 0

    super_lint:
        container: cache-registry.caas.intel.com/cache/github/super-linter
        runs-on: [self-hosted, gasp]
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: Lint
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  VALIDATE_RUST_2015: false
                  VALIDATE_RUST_2018: false
                  VALIDATE_RUST_2021: false
                  VALIDATE_RUST_CLIPPY: false
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  /action/lib/linter.sh

    build_images:
        container: cache-registry.caas.intel.com/cache/kaniko-project/executor
        runs-on: [self-hosted, gasp]
        steps:
            - uses: actions/checkout@v3
            - name: Build Hello World Container
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  /kaniko/executor \
                    --context examples/hello-world \
                    --dockerfile Dockerfile \
                    --no-push \
                    --tarPath /hello-world.tar \
                    --destination=image
            - name: Build X509Parse Container
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  /kaniko/executor \
                    --context examples/x509-parse \
                    --dockerfile Dockerfile \
                    --no-push \
                    --tarPath /x509-parse.tar \
                    --destination=image
            - uses: actions/upload-artifact@v3
              with:
                  name: hello-world-image
                  path: |
                      /hello-world.tar
            - uses: actions/upload-artifact@v3
              with:
                  name: x509-parse-image
                  path: |
                      /x509-parse.tar

    trivy:
        needs: build_images
        container: cache-registry.caas.intel.com/cache/aquasec/trivy
        runs-on: [self-hosted, gasp]
        steps:
            - uses: actions/download-artifact@v3
              with:
                  name: hello-world-image
                  path: /hello-world.tar
            - uses: actions/download-artifact@v3
              with:
                  name: x509-parse-image
                  path: /x509-parse.tar
            - name: Scan Hello World Container
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  trivy --input /hello-world.tar
            - name: Scan X509Parse Container
              run: |
                  [ -f "/__w/_temp/_github_workflow/event.json" ] && export GITHUB_EVENT_PATH=/__w/_temp/_github_workflow/event.json
                  trivy --input /x509-parse.tar
