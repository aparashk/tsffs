extern crate num_traits;
use anyhow::{Context, Error, Result};
use num_derive::FromPrimitive;
use serde::{Deserialize, Serialize};

#[derive(Debug, FromPrimitive, Serialize, Deserialize, Clone)]
#[repr(i64)]
/// A Magic value that can be generated by a target as part of a "Magic Instruction" (cpuid with
/// a specific leaf on x86) and passed to SIMICS through the `Core_Magic_Instruction` HAP
pub enum Magic {
    /// Magic value that the target has reached its stop location
    Stop = 0x4242,
    /// Magic value that the target has reached its start location
    Start = 0x4343,
}

impl TryFrom<i64> for Magic {
    type Error = Error;

    /// Try to convert a u16 value to a known `Magic` value
    fn try_from(value: i64) -> Result<Self> {
        num::FromPrimitive::from_i64(value)
            .context(format!("Could not convert value {} to Magic", value))
    }
}
